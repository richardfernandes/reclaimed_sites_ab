---
title: "GEE polygons reference buffers"
author: Ronny A. Hernandez Mora
execute:
  message: false
  warning: false
format: 
  html:
    theme:
      - flatly
    linkcolor: "#FF5500"
    highlight-style: tango
    toc: true
    toc-title: Table of contents
    toc-location: left
    number-sections: false
    colorlinks: true
    code-fold: true
    code-line-numbers: true
editor: visual
jupyter: python3
editor_options: 
  chunk_output_type: console
---

# Creation of buffers

```{python}
import ee
import geemap
import json

ee.Initialize()
```


```{python}
polygons = ee.FeatureCollection("projects/ee-ronnyale/assets/pixel_count_flags_v5")

def create_buffer(feature):
  buffered_feature = feature.buffer(30, 1)
  return buffered_feature

polygons_with_buffer = polygons.map(create_buffer)
```


```{python}
buffers_map = geemap.Map(center=[53.516, -113.498], zoom=5)
buffers_map.addLayer(polygons_with_buffer, {'color': 'blue'}, 'check')
buffers_map.addLayer(polygons, {'color': 'red'}, 'original')
buffers_map
```

Now I need to keep the new buffer geometry and from that one, build a second geometry. 
The second geometry will be the geometries that I need to run with the leaftoolbox
Also, I will need a reference for the polygon id that will be the key to the reference
buffer. 

```{python}
second_buffer = polygons_with_buffer.map(create_buffer)
buffers_map.addLayer(second_buffer, {'color': 'yellow'}, 'second buffer')
buffers_map
```


Getting the difference between the first and second buffer
```{python}
polygons = ee.FeatureCollection('projects/ee-ronnyale/assets/pixel_count_flags_v5')

def create_well_buffer(feature):
    buffer_geometry = feature.buffer(30, 1)
    buffer_geometry_feature = buffer_geometry.geometry()
    reference_buffer = buffer_geometry_feature.buffer(90, 1)
    buffer_only_geometry = reference_buffer.difference(buffer_geometry_feature)
    buffer_id = ee.Feature(buffer_only_geometry).copyProperties(feature, ['wllst__'])
    return ee.Feature(buffer_id)


# Apply the buffer function to the polygons feature collection
buffer_only_polygons = polygons.map(create_well_buffer)

buffers_map.addLayer(buffer_only_polygons, {'color': 'black'}, 'only buffer')
buffers_map
```


```{python}
sample = buffer_only_polygons.limit(1).getInfo()
print(json.dumps(sample, indent = 2))
```


```{python}
import ee

# Initialize the Earth Engine library
ee.Initialize()

# Load the polygons feature collection
polygons = ee.FeatureCollection(
    'projects/ee-ronnyale/assets/pixel_count_flags_v5')

# Define the function to create the buffer and retain the 'wllst__' property
def create_well_buffer(feature):
    buffer_geometry = feature.buffer(30, 1)
    buffer_geometry_feature = buffer_geometry.geometry()
    reference_buffer = buffer_geometry_feature.buffer(90, 1)
    buffer_only_geometry = reference_buffer.difference(buffer_geometry_feature)
    wllst_value = feature.get('wllst__')
    buffer_feature = ee.Feature(
        buffer_only_geometry).set('wllst__', wllst_value)
    return buffer_feature

buffer_only_polygons = polygons.map(create_well_buffer)
```
