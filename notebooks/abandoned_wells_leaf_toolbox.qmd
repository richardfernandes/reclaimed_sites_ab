---
title: "Leaf toolbox results"
author: Ronny A. Hernandez Mora
execute:
  message: false
  warning: false
format: 
  html:
    theme:
      - flatly
    linkcolor: "#FF5500"
    highlight-style: tango
    toc: true
    toc-title: Table of contents
    toc-location: left
    number-sections: false
    colorlinks: true
    code-fold: true
    code-line-numbers: true
editor: visual
jupyter: python3
editor_options: 
  chunk_output_type: console
---

# Explore  

```{python}
import ee
import geemap
import json
import matplotlib.pyplot as plt
import pandas as pd
import os
import sys
import pickle
import time
import glob

# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from utils.utils import initialize_gee

initialize_gee()
```

## Run LEAF-toolbox on selected abandoned well polygons 

Asset used for this section was created in GEE script **create_sampler_asset**

## Other notes:

 - SR results will be used with these functions.
 - LAI results will be obtained with functions to be imported.

### Landsat reflectance

This is with the filtered asset (steps in script random_polygons) with 1000 random 
selected abandoned wells.

```{python}
# Read the LC08 files into one dataframe
pickle_directory = '../data_out'
pickle_files = glob.glob(f"{pickle_directory}/time_series_LC08_batch_*.pkl")
dataframes = []
for pkl_file in pickle_files:
    with open(pkl_file, 'rb') as file:
        df = pickle.load(file)
        dataframes.append(df)

lc08 = pd.concat(dataframes, ignore_index = True)

# # Export results
# with open('time_series_harmonized.pkl', 'wb') as file:
#     pickle.dump(combined_df, file)
```


```{python}
# Check the columns
print(list(lc08.columns))

# Check # observatios per site
grouped_df = lc08.groupby("site").size()
print("Number of observatios per site: ")
print(grouped_df)
max(grouped_df)
min(grouped_df)
```

# Time series trends

## Canopy cover
```{python}
# Obtain NDVI to calculate canopy cover
def calculate_ndvi(df, red_band, nir_band):
    """
    Calculate NDVI and add it as a new column to the DataFrame.
    
    Parameters:
    df (pd.DataFrame): The DataFrame containing the reflectance values.
    red_band (str): The column name for the red band reflectance values.
    nir_band (str): The column name for the near-infrared band reflectance values.
    
    Returns:
    pd.DataFrame: The DataFrame with an additional 'NDVI' column.
    """
    df['ndvi'] = (df[nir_band] - df[red_band]) / (df[nir_band] + df[red_band])
    return df
    
lc08 = calculate_ndvi(lc08, 'SR_B4', 'SR_B5')
lc08.head()
```








# Plotting some results

```{python}
# # Choose a site from the sitelist
# siteNum=282

# # Select the first feature
# featureNum = 0

# #Select one sampled pixel from each feature
# pixelNum = 3

# #Extract time series of LAI with high quality only
# site = sitesDictionaryL08SR[siteList[siteNum]]
# # print(site[featureNum]['leaftoolbox.SL2PV0'])
# df=site[featureNum]['leaftoolbox.SL2PV0']
# df['utc'] =  pd.to_datetime(df['date'],unit='ms')
# pixelL08V0=df.loc[(df['longitude']==df.loc[pixelNum].longitude) & (df['latitude']==df.loc[pixelNum].latitude) & (df['QC']==0)]


# fig,ax = plt.subplots(1,1,figsize=[10,10])
# plt.plot(pixelL08V0['utc'],pixelL08V0['estimateLAI'],'ob',markerfacecolor='none', label='L08V1')

# ax.legend()
# ax.set_xlabel('date')
# ax.set_ylabel('LAI')
# plt.xticks(rotation=90);
```









