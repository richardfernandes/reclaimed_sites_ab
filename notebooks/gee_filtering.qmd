---
title: "GEE polygons filters"
author: Ronny A. Hernandez Mora
execute:
  message: false
  warning: false
format: 
  html:
    theme:
      - flatly
    linkcolor: "#FF5500"
    highlight-style: tango
    toc: true
    toc-title: Table of contents
    toc-location: left
    number-sections: false
    colorlinks: true
    code-fold: true
    code-line-numbers: true
editor: visual
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{python}
import ee
import geemap
import folium
import json
```

After selecting the polygons from the abandoned wells, the following steps will continue with the 
filtering in GEE.

# Abandoned wells polygons

Polygons data source is the the layer `o16_WellsAbnd_HFI_2021` from the [Wall-to-Wall Human Footprint Inventory](https://abmi.ca/home/data-analytics/da-top/da-product-overview/Human-Footprint-Products/HF-inventory.html) by the [Alberta Biodiversity Monitoring Institute](https://abmi.ca/home.html).

The polygons in the data are the result of the filter applied in the `run_polygons_filter.py` 
[script](https://github.com/ronnyhdez/reclaimed_sites_ab/blob/main/scripts/abandoned_sites_ingestion.py)


```{python}
# # Get list of assets

# ee.Initialize()
# path = 'users/ronnyale'

# # List assets
# assets = ee.data.listAssets({'parent': path})
# print(assets)
# # Extract asset names
# asset_names = [asset['id'] for asset in assets['assets']]

# # Print the asset names
# print("List of assets:")
# for asset in asset_names:
#     print(asset)
```


```{python}
ee.Initialize()

asset_id = 'projects/ee-ronnyale/assets/selected_polygons'

abandoned_wells = ee.FeatureCollection(asset_id)

# getInfo query is aborted after accumulating 5000 elements
# print(abandoned_wells.getInfo())
```

Check the polygons

```{python}
Map = geemap.Map(center=[53.516, -113.498], zoom=5)
Map.addLayer(abandoned_wells, {}, "Polygons")
Map
```

# Reservoirs 

The reservoirs polygons data source is the the layer `o01_Reservoirs_HFI_2021` from the [Wall-to-Wall Human Footprint Inventory](https://abmi.ca/home/data-analytics/da-top/da-product-overview/Human-Footprint-Products/HF-inventory.html) by the [Alberta Biodiversity Monitoring Institute](https://abmi.ca/home.html).

According to the _HFI 2021 Metadata, Version 1.0_, reservoirs are:

 > An artificial lake or storage pond resulting from human-made dam.
 A body of water created by excavation or the man-made damming of a
 river or stream.

```{python}
asset_id = 'projects/ee-ronnyale/assets/reservoirs'
reservoirs = ee.FeatureCollection(asset_id)

Map.addLayer(reservoirs, {'color': 'blue'}, 'reservoirs')
Map
```

## Create buffers in Reservoirs polygons

```{python}
# Create function to buffer each feature by 30m
def buffer_feature(feature):
  return feature.buffer(30)

# Apply the buffer function to each of the reservoir polygons
buffered_reservoirs = reservoirs.map(buffer_feature)

# Plot the buffers in the map
Map.addLayer(buffered_reservoirs, {'color': '#75AADB'}, "buffered_reservoirs")
Map
```

### Find abandoned wells intersections with reservoirs

Manually, it seems that there is no abandoned well that intersects the reservoirs buffer areas.
Nonethels, we can check this with a function that records if there is an intersection or not.

```{python}
# Function to find intersections between buffered polygons and waterbodies
def define_intersection(well):
    intersects_reservoirs = reservoirs.filterBounds(well.geometry()).size().gt(0)
    intersects_reservoirs_buffer = buffered_reservoirs.filterBounds(well.geometry()).size().gt(0)
    return well.set('intersects_reservoirs', intersects_reservoirs) \
               .set('intersects_reservoirs_buffer', intersects_reservoirs_buffer)

# Apply the intersection check to each well
wells_with_intersections = abandoned_wells.map(define_intersection)

# Show a sample
sample = wells_with_intersections.limit(6).getInfo()
print(json.dumps(sample, indent = 2))
```

# The Land Cover Classification layer

Using the _Land-use/Land-cover Classification of Alberta, Derived from 2020 Sentinel-2 Multispectral Data_ [here](https://ags.aer.ca/publication/dig-2021-0019), it's based on reflectance data.

The asset we consumed from GEE, looks like:

```{python}
land_cover_viz = {
    'min': 0,
    'max': 14,
    'palette': [
        '000000',  
        '1f77b4',  
        'ff7f0e',  
        '2ca02c',  
        'd62728',  
        '9467bd',  
        '8c564b',  
        'e377c2',  
        '7f7f7f',  
        'bcbd22',  
        '17becf',  
        '8c564b',  
        'e377c2',  
        '7f7f7f',   
        '7AADB4'   
    ]
}

Map.addLayer(asset_image, 
            land_cover_viz,
            'land cover')
Map
```

I need to reduce the raster image to obtain polgyons according to the following categories: 

 - `1` == `Water`. 
 - `3` == `Wetland trees`. 
 - `7` == `Wetland`. 
 - `13` == `Developed`. 

Let's check the asset info:

```{python}
asset_id = 'projects/ee-eoagsaer/assets/LULC_2022_EE'

asset_image = ee.Image(asset_id)

info = asset_image.getInfo()
print(info)
# print("Asset Type:", info['type'])
# print("Bands:", info['bands'])
# print("Properties:", info['properties'])
```

## Waterbodies

### Create the waterbodies mask

From all the features we have, I need juts the waterbodies. This is a raster which I also need to
reduce to a vector to create the buffer area.

```{python}
# Water category is 1 (as seen in qgis)
water_mask = asset_image.eq(1)
water_image = asset_image.updateMask(water_mask)

# Steps from raster to vector
water_bodies_vector = water_image.reduceToVectors(
    geometryType='polygon',
    scale=10,  # LCC layer documentation states is 10m
    maxPixels=1e8,
    bestEffort=True,
    labelProperty='water_bodies'
)

Map.remove_layer('land cover')
Map.addLayer(water_bodies_vector, {'color': 'blue'}, 'waterbodies_mask')
Map
```

How many waterbodies polygons do I have?
```{python}
print(water_bodies_vector.size().getInfo())  # Number of water body polygons
# print(water_bodies_vector.getInfo()) # Query exceeds the API limit

# In case I need the resulting polygons
# export_task = ee.batch.Export.table.toDrive(
#     collection = water_bodies_vector,
#     description = 'water_bodies_polygons',
#     folder = 'earth_engine_exports',
#     fileFormat = 'SHP'
# )
# export_task.start()
# print("Export started. Check your Google Drive for the results.")
```

### Create buffers for waterbodies

Based on the waterbodies resulting polygons, we are going to create a buffer area and then check
if any of the abandoned well sites intersects them.

```{python}
# Function defined above in reservoirs section
buffered_waterbodies = water_bodies_vector.map(buffer_feature)
Map.addLayer(buffered_waterbodies, {'color' : '#75AADB'}, 'waterbodies_buffer')
Map
```

### Find abandoned wells intersections with waterbodies

```{python}
# Function to check if a well intersects with waterbodies or buffered waterbodies
def define_intersection(well):
    intersects_waterbody = water_bodies_vector.filterBounds(well.geometry()).size().gt(0)
    intersects_buffer = buffered_waterbodies.filterBounds(well.geometry()).size().gt(0)
    return well.set('intersects_waterbody', intersects_waterbody.toInt()) \
               .set('intersects_buffer', intersects_buffer.toInt())

# Apply the intersection check to each well
wells_with_intersections = abandoned_wells.map(define_intersection)

# Show a sample
sample = wells_with_intersections.limit(6).getInfo()
print(json.dumps(sample, indent = 2))
```

## Developed area

 - Follow same process as waterbodies

```{python}
developed_mask = asset_image.eq(13)
developed_image = asset_image.updateMask(developed_mask)

developed_vector = developed_image.reduceToVectors(
  geometryType = 'polygon',
  scale = 10,
  maxPixels=1e8,
  bestEffort = True,
  labelProperty = 'developed_areas'
)

Map.addLayer(developed_vector, {'color': 'red'})
Map
```

### Create developed area buffers

```{python}
buffered_developed_areas = developed_vector.map(buffer_feature)
```

### Find intersections with developed areas

```{python}
def define_intersection(well):
    intersects_developed_areas = developed_vector.filterBounds(well.geometry()).size().gt(0)
    intersects_buffer = buffered_developed_areas.filterBounds(well.geometry()).size().gt(0)
    return well.set('intersects_developed_areas', intersects_developed_areas.toInt()) \
               .set('intersects_buffer_developed_areas', intersects_buffer.toInt())

# Apply the intersection check to each well
wells_with_intersections_developed_areas = abandoned_wells.map(define_intersection)

# Show a sample
sample = wells_with_intersections_developed_areas.limit(6).getInfo()
print(json.dumps(sample, indent = 2))
```



# Export final object

```{python}
# # Export the result as an asset for future use
# export_asset_id = 'projects/ee-ronnyale/assets/intersecting_wells_waterbodies'
# export_task = ee.batch.Export.table.toAsset(
#     collection=wells_with_intersections,
#     description='export_intersecting_wells_with_waterbodies',
#     assetId=export_asset_id
# )
# export_task.start()
```


# Mapping the abandoned wells that intersects one of the categories.

To review and validate abandoned wells polygons that intersect one of the categories, here is a map:

```{python}
intersects_asset_id = 'projects/ee-ronnyale/assets/intersecting_wells_waterbodies'
intersects = ee.FeatureCollection(intersects_asset_id)

intersecting_filter = ee.Filter.eq("intersects_buffer", 1)
intersecting_water = intersects.filter(intersecting_filter)
sample = intersecting_water.limit(10).getInfo()
print(json.dumps(sample, indent=2))

# Plot abandoned wells that intersect waterbodies
wells_intersecting_map = geemap.Map(center=[53.516, -113.498], zoom=5)
wells_intersecting_map.addLayer(
    intersecting_water, {}, 'wells intersecting water')
wells_intersecting_map
```

# Code summary

```{python}
# # summary code
# import ee
# import geemap
# import json

# ee.Initialize()

# # Abandoned wells
# asset_id = 'projects/ee-ronnyale/assets/selected_polygons'
# abandoned_wells = ee.FeatureCollection(asset_id)

# # Waterbodies
# asset_id = 'projects/ee-eoagsaer/assets/LULC_2022_EE'
# asset_image = ee.Image(asset_id)

# ## Mask for waterbodies
# water_mask = asset_image.eq(1)
# water_image = asset_image.updateMask(water_mask)
# ## Reduce to vector to obtain polygons from raster
# water_bodies_vector = water_image.reduceToVectors(
#     geometryType='polygon',
#     scale=10,  # LCC layer documentation states is 10m
#     maxPixels=1e8,
#     bestEffort=True,
#     labelProperty='water_bodies'
# )
# ## Create buffer of waterbodies
# def buffer_feature(feature):
#   return feature.buffer(30)

# buffered_waterbodies = water_bodies_vector.map(buffer_feature)

# # Check if abandoned wells fall within the buffer area or waterbodies area
# # Function to check if a well intersects with waterbodies or buffered waterbodies
# def define_intersection(well):
#     intersects_waterbody = water_bodies_vector.filterBounds(well.geometry()).size().gt(0)
#     intersects_buffer = buffered_waterbodies.filterBounds(well.geometry()).size().gt(0)
#     return well.set('intersects_waterbody', intersects_waterbody) \
#                .set('intersects_buffer', intersects_buffer)

# # Apply the intersection check to each well
# wells_with_intersections = abandoned_wells.map(define_intersection)

# # Show a sample
# sample = wells_with_intersections.limit(39).getInfo()
# print(json.dumps(sample, indent = 2))
```


```{python}
# # Export to validate later observations
# export_drive_task = ee.batch.Export.table.toDrive(
#     collection=wells_with_intersections,
#     description='abandoned_wells_with_intersections_30m',
#     fileFormat='CSV'
# )
# export_drive_task.start()
```

