---
title: "GEE polygons filters"
author: Ronny A. Hernandez Mora
execute:
  message: false
  warning: false
format: 
  html:
    theme:
      - flatly
    linkcolor: "#FF5500"
    highlight-style: tango
    toc: true
    toc-title: Table of contents
    toc-location: left
    number-sections: false
    colorlinks: true
    code-fold: true
    code-line-numbers: true
editor: visual
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{python}
import ee
import geemap
import folium
import json
```

After selecting the polygons from the abandoned wells, the following steps will continue with the 
filtering in GEE.

# Abandoned wells polygons

Polygons data source is the the layer `o16_WellsAbnd_HFI_2021` from the [Wall-to-Wall Human Footprint Inventory](https://abmi.ca/home/data-analytics/da-top/da-product-overview/Human-Footprint-Products/HF-inventory.html) by the [Alberta Biodiversity Monitoring Institute](https://abmi.ca/home.html).

The polygons in the data are the result of the filter applied in the `run_polygons_filter.py` 
[script](https://github.com/ronnyhdez/reclaimed_sites_ab/blob/main/scripts/abandoned_sites_ingestion.py)


```{python}
# # Get list of assets

# ee.Initialize()
# path = 'users/ronnyale'

# # List assets
# assets = ee.data.listAssets({'parent': path})
# print(assets)
# # Extract asset names
# asset_names = [asset['id'] for asset in assets['assets']]

# # Print the asset names
# print("List of assets:")
# for asset in asset_names:
#     print(asset)

ee.Initialize()

asset_id = 'projects/ee-ronnyale/assets/selected_polygons'

abandoned_wells = ee.FeatureCollection(asset_id)

# getInfo query is aborted after accumulating 5000 elements
# print(abandoned_wells.getInfo())
```

```{python}
abandoned_wells_map = geemap.Map(center=[53.516, -113.498], zoom=5)
abandoned_wells_map.addLayer(abandoned_wells, {}, "Polygons")
abandoned_wells_map
```

# Reservoirs 

The reservoirs polygons data source is the the layer `o01_Reservoirs_HFI_2021` from the [Wall-to-Wall Human Footprint Inventory](https://abmi.ca/home/data-analytics/da-top/da-product-overview/Human-Footprint-Products/HF-inventory.html) by the [Alberta Biodiversity Monitoring Institute](https://abmi.ca/home.html).

According to the _HFI 2021 Metadata, Version 1.0_, reservoirs are:

 > An artificial lake or storage pond resulting from human-made dam.
 A body of water created by excavation or the man-made damming of a
 river or stream.

## Create buffers in Reservoirs polygons

```{python}
asset_id = "projects/ee-ronnyale/assets/reservoirs"
reservoirs = ee.FeatureCollection(asset_id)

# Create function to buffer each feature by 30m
def buffer_feature(feature):
  return feature.buffer(30)

# Apply the buffer function to each of the reservoir polygons
buffered_reservoirs = reservoirs.map(buffer_feature)

# Plot the buffers in the map
reservoirs_map = geemap.Map(center=[53.516, -113.498], zoom=5)
reservoirs_map.addLayer(reservoirs, {"color": "blue"}, "reservoirs")
reservoirs_map.addLayer(buffered_reservoirs, {'color': '#75AADB'}, "buffered_reservoirs")
reservoirs_map
```

### Find abandoned wells intersections with reservoirs

Manually, it seems that there is no abandoned well that intersects the reservoirs buffer areas.
Nonetheles, we can check this with a function that records if there is an intersection or not. 
The following show the adding of the new two properties to the feature collection: intersection
with the buffer and intersection with the reservoir polygon.

```{python}
# Function to find intersections between buffered polygons and waterbodies
def define_intersection(well):
    intersects_reservoirs = reservoirs.filterBounds(well.geometry()).size().gt(0)
    intersects_reservoirs_buffer = buffered_reservoirs.filterBounds(well.geometry()).size().gt(0)
    return well.set('intersects_reservoirs', intersects_reservoirs) \
               .set('intersects_reservoirs_buffer', intersects_reservoirs_buffer)

# Apply the intersection check to each well
wells_with_intersections = abandoned_wells.map(define_intersection)

# Show a sample
sample = wells_with_intersections.limit(2).getInfo()
print(json.dumps(sample, indent = 2))
```

# The Land Cover Classification layer

Using the _Land-use/Land-cover Classification of Alberta, Derived from 2020 Sentinel-2 Multispectral Data_ [here](https://ags.aer.ca/publication/dig-2021-0019), it's based on reflectance data.

Let's check the asset info:

```{python}
asset_id = 'projects/ee-eoagsaer/assets/LULC_2022_EE'

asset_image = ee.Image(asset_id)

info = asset_image.getInfo()
print(info)
# print("Asset Type:", info['type'])
# print("Bands:", info['bands'])
# print("Properties:", info['properties'])
```

The asset we consumed from GEE, looks like:

```{python}
land_cover_viz = {
    "min": 0,
    "max": 14,
    "palette": [
        "000000",
        "1f77b4",
        "ff7f0e",
        "2ca02c",
        "d62728",
        "9467bd",
        "8c564b",
        "e377c2",
        "7f7f7f",
        "bcbd22",
        "17becf",
        "8c564b",
        "e377c2",
        "7f7f7f",
        "7AADB4",
    ],
}
lcu_map = geemap.Map(center=[53.516, -113.498], zoom=5)
lcu_map.addLayer(asset_image, land_cover_viz, "land cover")
lcu_map
```

I need to reduce the raster image to obtain polgyons according to the following categories: 

 - `1` == `Waterbodies`. 
 - `3` == `Wetland treed`. 
 - `7` == `Wetland`. 
 - `13` == `Developed`. 

::: {.callout-note}
Still need to process the `wetland_treed` and the `wetland` categories. Run out of memory
in GEE. The developed area seems to be more appropiate with vector data from ABMI using
`residential` and `industrial` categories.
:::

## Waterbodies

### Create the waterbodies mask

From all the features we have, I need juts the waterbodies. This is a raster which I also need to
reduce to a vector to create the buffer area.

```{python}
# Water category is 1 (as seen in qgis)
water_mask = asset_image.eq(1)
water_image = asset_image.updateMask(water_mask)

# Steps from raster to vector
water_bodies_vector = water_image.reduceToVectors(
    geometryType="polygon",
    scale=10,  # LCC layer documentation states is 10m
    maxPixels=1e8,
    bestEffort=True,
    labelProperty="water_bodies",
)

waterbodies_map = geemap.Map(center=[53.516, -113.498], zoom=5)
waterbodies_map.addLayer(water_bodies_vector, {"color": "blue"}, "waterbodies_mask")
waterbodies_map
```

How many waterbodies polygons do I have?
```{python}
print(water_bodies_vector.size().getInfo())  # Number of water body polygons
# print(water_bodies_vector.getInfo()) # Query exceeds the API limit

# In case I need the resulting polygons
# export_task = ee.batch.Export.table.toDrive(
#     collection = water_bodies_vector,
#     description = 'water_bodies_polygons',
#     folder = 'earth_engine_exports',
#     fileFormat = 'SHP'
# )
# export_task.start()
# print("Export started. Check your Google Drive for the results.")
```

### Create buffers for waterbodies

Based on the waterbodies resulting polygons, we are going to create a buffer area and then check
if any of the abandoned well sites intersects them.

```{python}
# Function defined above in reservoirs section
buffered_waterbodies = water_bodies_vector.map(buffer_feature)
waterbodies_buffer_map = geemap.Map(center=[53.516, -113.498], zoom=5)
waterbodies_buffer_map.addLayer(
    water_bodies_vector, {"color": "blue"}, "waterbodies_mask"
)
waterbodies_buffer_map.addLayer(
    buffered_waterbodies, {"color": "#75AADB"}, "waterbodies_buffer"
)
waterbodies_buffer_map
```

::: {.callout-important}
Check that when creating the mask from the raster data, not all waterbodies match completely
the waterbodies. This can be seen when zooming in the visualization.
:::

### Find abandoned wells intersections with waterbodies

```{python}
# Function to check if a well intersects with waterbodies or buffered waterbodies
def define_intersection(well):
    intersects_waterbody = water_bodies_vector.filterBounds(well.geometry()).size().gt(0)
    intersects_buffer = buffered_waterbodies.filterBounds(well.geometry()).size().gt(0)
    return well.set('intersects_waterbody', intersects_waterbody.toInt()) \
               .set('intersects_buffer', intersects_buffer.toInt())

# Apply the intersection check to each well
wells_with_intersections = abandoned_wells.map(define_intersection)

# Show a sample
sample = wells_with_intersections.limit(2).getInfo()
print(json.dumps(sample, indent = 2))
```

## Developed area

 - I will follow same process as waterbodies to create a mask (convert to vector) and then create
 the buffers

```{python}
developed_mask = asset_image.eq(13)
developed_image = asset_image.updateMask(developed_mask)

developed_vector = developed_image.reduceToVectors(
    geometryType="polygon",
    scale=10,
    maxPixels=1e8,
    bestEffort=True,
    labelProperty="developed_areas",
)

buffered_developed_areas = developed_vector.map(buffer_feature)

developed_map = geemap.Map(center=[53.516, -113.498], zoom=5)
developed_map.addLayer(developed_vector, {"color": "gray"})
developed_map.addLayer(buffered_developed_areas, {"color": "red"})
developed_map

# # Find intersections with developed areas
# def define_intersection(well):
#     intersects_developed_areas = developed_vector.filterBounds(well.geometry()).size().gt(0)
#     intersects_buffer = buffered_developed_areas.filterBounds(well.geometry()).size().gt(0)
#     return well.set('intersects_developed_areas', intersects_developed_areas.toInt()) \
#                .set('intersects_buffer_developed_areas', intersects_buffer.toInt())

# # Apply the intersection check to each well
# wells_with_intersections_developed_areas = abandoned_wells.map(define_intersection)

# # Show a sample
# sample = wells_with_intersections_developed_areas.limit(2).getInfo()
# print(json.dumps(sample, indent = 2))
```

::: {.callout-important}
I didn't use the `developed_area` category from the AER data that is a raster. Rather I used
the ABMI data which is already a vector and contains the `residential` and `industrial`
categories to create the buffers and check which abandoned wells intersect those.
:::

# Intersecting abandoned wells.

After running the [flagging_assets.py](https://github.com/ronnyhdez/reclaimed_sites_ab/blob/main/scripts/flagging_assets.py)
script and creating the asset in GEE, I was able to filter and validate which abandoned wells
polygons intersected the buffers.

The following visualization shows the abandoned wells polygons which intersects one of the
buffered areas or polygon areas to avoid for the future analysis with LEAF-toolbox. The
categories are:

 - industrial
 - residential
 - reservoirs
 - roads
 - waterbodies

## Glimpse of the flagged feature collection

Here is a glimpse of the new properties created with the flagged intersections. Also, the
number of abandoned wells polygons to be filter out.

```{python}
intersects_asset_id = "projects/ee-ronnyale/assets/intersecting_wells_flags_v2"
intersects = ee.FeatureCollection(intersects_asset_id)

# Get all polygons with an intersetion
filters = [
    ee.Filter.eq("intersects_industrial", 1),
    ee.Filter.eq("intersects_industrial_buffer", 1),
    ee.Filter.eq("intersects_reservoirs", 1),
    ee.Filter.eq("intersects_reservoirs_buffer", 1),
    ee.Filter.eq("intersects_residential", 1),
    ee.Filter.eq("intersects_residential_buffer", 1),
    ee.Filter.eq("intersects_roads", 1),
    ee.Filter.eq("intersects_roads_buffer", 1),
    ee.Filter.eq("intersects_waterbodies", 1),
    ee.Filter.eq("intersects_waterbody_buffer", 1),
]

# Combine the filters using ee.Filter.or
combined_filter = ee.Filter.Or(*filters)

# Apply the combined filter to the feature collection
intersecting_features = intersects.filter(combined_filter)

sample = intersecting_features.limit(2).getInfo()
print(json.dumps(sample, indent=2))
print(intersecting_features.size().getInfo())
```

## Visualization of intersecting abandoned wells

```{python}
# ABMI vector layers
asset_flagged = "projects/ee-ronnyale/assets/intersecting_wells_flags"
abandoned_wells = ee.FeatureCollection(asset_flagged)

## Industrial ABMI
asset_id = "projects/ee-ronnyale/assets/industrial"
asset_industrial = ee.FeatureCollection(asset_id)

## Residential ABMI
asset_id = "projects/ee-ronnyale/assets/residentials"
asset_residential = ee.FeatureCollection(asset_id)

## Roads ABMI
asset_id = "projects/ee-ronnyale/assets/roads"
asset_roads = ee.FeatureCollection(asset_id)

## Create buffer industrial-residential-roads
buffered_industrial = asset_industrial.map(buffer_feature)
buffered_residential = asset_residential.map(buffer_feature)
buffered_roads = asset_roads.map(buffer_feature)

# Plot abandoned wells that intersect waterbodies
wells_intersecting_map = geemap.Map(center=[53.516, -113.498], zoom=5)

## Reservoirs
wells_intersecting_map.addLayer(reservoirs, {"color": "blue"}, "reservoirs")
wells_intersecting_map.addLayer(
    buffered_reservoirs, {"color": "#75AADB"}, "reservoirs_buffer"
)

## Waterbodies
wells_intersecting_map.addLayer(
    water_bodies_vector, {"color": "blue"}, "waterbodies_mask"
)
wells_intersecting_map.addLayer(
    buffered_waterbodies, {"color": "#75AADB"}, "waterbodies_buffer"
)

## Industrial
wells_intersecting_map.addLayer(asset_industrial, {"color": "#2B2D42"}, "industrial")
wells_intersecting_map.addLayer(
    buffered_industrial, {"color": "#8D99AE"}, "industrial_buffer"
)

## Residential
wells_intersecting_map.addLayer(asset_residential, {"color": "#F77F00"}, "residential")
wells_intersecting_map.addLayer(
    buffered_residential, {"color": "#FCBF49"}, "residential_buffer"
)

## Roads
wells_intersecting_map.addLayer(asset_roads, {"color": "#212529"}, "roads")
wells_intersecting_map.addLayer(buffered_roads, {"color": "#343A40"}, "rodas_buffer")

wells_intersecting_map.addLayer(
    intersecting_features, {"color": "#FBFF12"}, "abandoned_wells"
)
wells_intersecting_map
```

# Non-intersecting abandoned wells

```{python}
# Get all polygons without an intersetion
filters = [
    ee.Filter.eq("intersects_industrial", 0),
    ee.Filter.eq("intersects_industrial_buffer", 0),
    ee.Filter.eq("intersects_reservoirs", 0),
    ee.Filter.eq("intersects_reservoirs_buffer", 0),
    ee.Filter.eq("intersects_residential", 0),
    ee.Filter.eq("intersects_residential_buffer", 0),
    ee.Filter.eq("intersects_roads", 0),
    ee.Filter.eq("intersects_roads_buffer", 0),
    ee.Filter.eq("intersects_waterbodies", 0),
    ee.Filter.eq("intersects_waterbody_buffer", 0),
]

# Combine the filters using ee.Filter.or
combined_filter = ee.Filter.And(*filters)

# Apply the combined filter to the feature collection
non_intersecting_features = intersects.filter(combined_filter)

sample = non_intersecting_features.limit(2).getInfo()
print(json.dumps(sample, indent=2))
print(non_intersecting_features.size().getInfo())
```


```{python}
wells_map = geemap.Map(center=[53.516, -113.498], zoom=5)
wells_map.addLayer(non_intersecting_features, {"color": "black"}, "abandoned_wells")
wells_map
```

# Polygons size

```{python}
asset = "projects/ee-ronnyale/assets/intersecting_wells_flags_v2"

abandoned_wells = ee.FeatureCollection(asset)

pixels = (
    ee.Image.constant(1)
    .clip(abandoned_wells)
    .rename("pixels")
    .reproject(
        crs="EPSG:32512",  # UTM zone 12N
        scale=30,
    )
)

pixel_count = pixels.reduceRegions(
    collection=abandoned_wells, reducer=ee.Reducer.count(), scale=30
)

# Check results
print("Pixel counts: ", pixel_count.limit(2).getInfo())
```


## Check 30x30m pixels within polygons

```{python}
Map = geemap.Map(center=[52.82361173778549, -112.2608045090065], zoom=10)
Map.addLayer(abandoned_wells, {}, 'Polygons')
Map.addLayer(pixels, {'min': 0, 'max': 1, 'palette': ['white', 'blue']}, 'pixels')
Map
```

## Check numerb of pixels within polygons distributions 

```{python}
import matplotlib.pyplot as plt

# Count pixels
pixel_count_list = pixel_count.aggregate_array('count').getInfo()

plt.hist(pixel_count_list, bins=200, color='#1d6b99')
plt.title('Histogram of # pixels')
plt.xlabel('# pixels')
plt.ylabel('Frequency')
plt.show()
```

# Non-intersecting wells and non-empty pixels polygons


```{python}
# Read new asset
asset_id = "projects/ee-ronnyale/assets/intersecting_wells_flags_v3"
abandoned_wells = ee.FeatureCollection(asset_id)

# Get all polygons without an intersetion
filters = [
    ee.Filter.eq("intersects_industrial", 0),
    ee.Filter.eq("intersects_industrial_buffer", 0),
    ee.Filter.eq("intersects_reservoirs", 0),
    ee.Filter.eq("intersects_reservoirs_buffer", 0),
    ee.Filter.eq("intersects_residential", 0),
    ee.Filter.eq("intersects_residential_buffer", 0),
    ee.Filter.eq("intersects_roads", 0),
    ee.Filter.eq("intersects_roads_buffer", 0),
    ee.Filter.eq("intersects_waterbodies", 0),
    ee.Filter.eq("intersects_waterbody_buffer", 0),
    ee.Filter.greaterThan("count", 0),
]

# Combine the filters using ee.Filter.or
combined_filter = ee.Filter.And(*filters)

# Apply the combined filter to the feature collection
non_intersecting_features = abandoned_wells.filter(combined_filter)

sample = non_intersecting_features.limit(2).getInfo()
print(json.dumps(sample, indent=2))
print("# polygons after filtering: ", non_intersecting_features.size().getInfo())
```