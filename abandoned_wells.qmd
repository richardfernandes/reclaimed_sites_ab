---
title: "Abandoned wells data exploration"
author: Ronny A. Hernandez Mora
execute:
  message: false
  warning: false
format: 
  html:
    theme:
      - flatly
    linkcolor: "#FF5500"
    highlight-style: tango
    toc: true
    toc-title: Table of contents
    toc-location: left
    number-sections: false
    colorlinks: true
    code-fold: true
    code-line-numbers: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
library(dplyr)
library(sf)
library(janitor)
library(purrr)
library(visdat)
library(ggplot2)
library(rmarkdown)
library(gt)
library(cowplot)
library(plotly)
library(fdth)
```

This is an Exploratory Data Analysis to understand the data characteristics of 
the layer `o16_WellsAbnd_HFI_2021` from the [Wall-to-Wall Human Footprint Inventory](https://abmi.ca/home/data-analytics/da-top/da-product-overview/Human-Footprint-Products/HF-inventory.html) by the [Alberta Biodiversity Monitoring Institute](https://abmi.ca/home.html).

The aim is to identify characteristics that may aid in 
[selecting polygons](https://github.com/ronnyhdez/reclaimed_sites_ab/issues/6)
for subsequent analysis.

For the findings summary, go to [Key findings](https://ronnyhdez.github.io/reclaimed_sites_ab/abandoned_wells.html#key-points)

# Read the data

Following information is part of the file metadata:

```{r}
abandoned_wells <- st_read(dsn = 'HFI2021.gdb/HFI2021.gdb',
                           layer = 'o16_WellsAbnd_HFI_2021') |> 
        clean_names() |>
        mutate(reclamation_status = case_when(
               reclamation_status == 1 ~ "not_reclaimed",
               reclamation_status == 2 ~ "reclamation_exempt",
               reclamation_status == 3 ~ "reclaimed",
               .default = "no_data"
        )) 
```

This is a dataframe with **`r nrow(abandoned_wells)` observations** and 
**`r ncol(abandoned_wells)` variables**. A glimpse of the first observations per
each variable and its type is shown here:

```{r}
glimpse(abandoned_wells)
```

# Attribute table general characteristics

Use just the attribute table as dataframe for quick exploration

```{r}
abandoned_wells_df <- abandoned_wells |> 
        st_drop_geometry()
```

## Unique values per variable

How many unique values do we have per variable?

```{r}
abandoned_wells_df |> 
        map_dfr(~n_distinct(.x)) |> 
        paged_table()
```

Insights from the output:

 - `footprint_id` does not match the number of observations. Check if there are
 NA's in polygons and why.
 - `well_status` we just have 1 which means **abandoned**.
 - `spud_date` and `spud_year` are the date when drilling first began on the
 well pad. 125 different years in the registry? Check how many years of data 
 we have.
 - The `number_wellheads` is the total number of wellbores on the well pad. Does
 this have an impact in the reclamation process?
 - `visible` variable probably have `NA's`. There should be just 3 values:
 0 = not visible, 1 = fully visible, 2 = partially visible. This reflects the
 state of visibility of a footprint. No idea what this means.
 - `oilsands_evaluation_well` we have just the 2 categories described in
 documentation: 0 = No Oil Sands Evaluation (OSE) well, 1 = OSE well present.
 - Check distribution of variable `reclamation_status`.
 - `reclamation_date` it's the most recent reclamation certification.

## Key variable

What is each row? The dataset has `r nrow(abandoned_wells_df)` observations that
should match the same amount of unique values for one of the variables contained
in the dataset. The variable closer to this number is `footprint_id`, but it
has less number of unique values. What are they?

Assuming that each row in the dataset is one unique site (or one unique
observation), the `wellsite_footprint_id` should have one observation per each
id.  

When grouping all the observations per `wellsite_footprint_id`, I found those
id's that have more than 1 observation as shown in @tbl-id_tally.

```{r}
#| label: tbl-id_tally
#| tbl-cap: "Well site id's with more than 1 observation"
abandoned_wells_df |> 
        group_by(wellsite_footprint_id) |> 
        tally(sort = T) |> 
        filter(n > 1) |> 
        gt()
```

The @tbl-id_repeated_complete, shows every well site with more than 1 
observation per id. In total, there are **56** well sites with this condition,  excluding the observations with NAs. It seems to have the same values for each
of its variables except for the `shape_length` and `shape_area`.

```{r}
#| label: tbl-id_repeated_complete
#| tbl-cap: "Data frame subset of the well sites which have more than 1 observation per id"
repeated_ids <- abandoned_wells_df |> 
        group_by(wellsite_footprint_id) |> 
        tally() |> 
        filter(n > 1 & !is.na(wellsite_footprint_id)) |> 
        select(wellsite_footprint_id) |> 
        pull()

abandoned_wells_df |> 
        filter(wellsite_footprint_id %in% repeated_ids) |> 
        arrange(wellsite_footprint_id) |> 
        paged_table()
```

The @fig-same_wellsite_id plots of the observations with the same `id` shows that probably, some
well sites, are composed by more than 1 polygon. They look relatively close. 
This segmentation explains the differences in the `shape_length` and 
`shape_area` variables when the rest of the variables are the exact same per
`id`

```{r}
#| label: fig-same_wellsite_id
#| fig-cap: "Polygons with the same well site id"
a <- abandoned_wells |> 
        filter(wellsite_footprint_id == 109118) |> 
        ggplot() +
        geom_sf() 

b <- abandoned_wells |> 
        filter(wellsite_footprint_id == 109503) |> 
        ggplot() +
        geom_sf()

c <- abandoned_wells |> 
        filter(wellsite_footprint_id == 268598) |> 
        ggplot() +
        geom_sf()

d <- abandoned_wells |> 
        filter(wellsite_footprint_id == 287438) |> 
        ggplot() +
        geom_sf()

plot_grid(a, b, c, d, labels = c('A', 'B', 'C', 'D'))
```

### What is happening with the NA's in id?

There are `r sum(is.na(abandoned_wells_df$wellsite_footprint_id))` observations
which have NA in the `wellsite_footprint_id` variable. The @fig-na_wellsite_id
shows that together with the `wellsite_footprint_id`, the `disp_num`, `lcu_id`,
and the vast majority of `fieldname` observations are also NAs.

```{r}
#| label: fig-na_wellsite_id
#| fig-cap: "Observations with NA in the well site id variable"
abandoned_wells_df |> 
        filter(is.na(wellsite_footprint_id) == TRUE) |> 
        vis_dat(sort_type = F)
```

Polygons with NA's in their ids seems to be fine (not segmented or empty). The
@fig-na_wellsite_id_polygon shows two of them.

```{r}
#| label: fig-na_wellsite_id_polygon
#| fig-cap: "Polygons with NAs in their ids"
a <- abandoned_wells |> 
        filter(is.na(wellsite_footprint_id) == TRUE) |> 
        slice(34) |> 
        ggplot() +
        geom_sf() 

b <- abandoned_wells |> 
        filter(is.na(wellsite_footprint_id) == TRUE) |> 
        slice(534) |> 
        ggplot() +
        geom_sf() 

plot_grid(a, b, labels = c('A', 'B'))
```

::: {.callout-important}
There are `r length(repeated_ids)` "segmented polygons" which are represented by
the same id. Also we have `r sum(is.na(abandoned_wells_df$wellsite_footprint_id))`
NA's in the well site ids, which have at the same time NAs in `disp_num`,
`lcu_id`, and `fieldname`

Should we exclude the 56 segmented polygons?
Do we want to use polygons without any id?
:::

## Character variables

We have just 6 character variables. Nonetheless, I should take into account that
other variables with categories are encoded with numbers and I should check the
ABMI data document to understand the meaning. The table @tbl-character_variables
 
```{r}
#| label: tbl-character_variables
#| tbl-cap: "Glimpse of the character variables"
abandoned_wells_df |> 
        select_if(is.character) |> 
        glimpse() 
```

Check unique values per character variable:

```{r}
# Check number of distinct observations
abandoned_wells_df |> 
        select_if(is.character) |> 
        map(~n_distinct(.x))

# Check categories 
abandoned_wells_df |> 
        select_if(is.character) |> 
        select(-hfi_id, -disp_num, -lcu_id) |>
        map(~unique(.x))
```

```{r}
# abandoned_wells_df |> 
#         vis_dat(warn_large_data = FALSE)
```

::: {.callout-note}
Everything seems fine with the character variables. Not much information seems
to be useful for the analysis.

There is just the category `abandoned`, 3 `fieldnames` and 4 data `sources`
:::

# Date variables

We have the following variables that represents a date in the dataset:

| Variable | Meaning |
| -------- | ------- |
| first_spud_date            | date when drilling first began on the well pad
| first_spud_year            | date when drilling first began on the well pad
| reclamation_date           | most recent reclamation certification issued
| min_onproduction_date      | earliest reported year a well went into prod
| max_last_production_date   | latest reported year of production at a well
| max_abandoned_date         | latest reported year a well was abandoned
| year                       | ? (Did not find definition in documentation)


## Reclamation date

We need to obtain the latest reclamation date for each of the polygons. One
site could potentially have several reclamation dates, but we have no way to
find out that information from this dataset. Also we are considering using just
the last reclamation date for the analysis. This dataset has reclamation
dates that span `r range(abandoned_wells_df$reclamation_date)`.

```{r}
abandoned_wells_df |> 
        group_by(reclamation_date) |> 
        tally() |> 
        paged_table()

zero_obs <- abandoned_wells_df |> 
        group_by(reclamation_date) |> 
        tally() |> 
        filter(reclamation_date == 0) |> 
        select(n) |> 
        pull()
```

::: {.callout-important}
From the summarized table, there are `r zero_obs` observations with a year
reclamation **date value of 0**.
:::

```{r}
## Check reclamation status vs reclamation date
date_recla_status <- abandoned_wells_df |> 
        mutate(reclamation_0 = ifelse(reclamation_date == 0, 
                                      "Date with 0", "Date with year")) |> 
        group_by(reclamation_status, reclamation_0) |>
        tally()
```

Further exploration indicates that observations with a zero in reclamation date
are categorized as `not_reclaimed` or `reclamation_exempt`. Nonetheless, there
are `r date_recla_status$n[4]` observations with year categorized as
`reclamation_exempt`

```{r}
date_recla_status |>
        ggplot(aes(x = reclamation_status, y = n, fill = reclamation_0)) + 
        geom_bar(stat = "identity") +
        theme_light()
```

Let's check the number of sites per year of the most recent reclamation
certification issued:

```{r}
abandoned_wells_df |> 
        group_by(reclamation_date) |> 
        tally() |> 
        filter(reclamation_date != 0) |> 
        ggplot(aes(x = reclamation_date, y = n)) +
        geom_col() +
        labs(x = "Year of the most recent reclamation certification issued",
             y = "Total well sites") +
        theme_light()
```

### Number of observations with minimun amount of years from reclamation year

We need to obtain polygons with a sufficient time range from the last
reclamation year to include in the analysis. The following interactive plot
helps to explore the number of observations that we have if we select the
number of years since the last reclamation certification was issued.

```{r}
# Create interactive plot that shows number of observations with at least
# 20 years or X since last year of reclamation

at_least_20 <- abandoned_wells_df |> 
        filter(reclamation_status == "reclaimed",
               reclamation_date != 0) |> 
        mutate(years = max(abandoned_wells_df$reclamation_date) -
                       reclamation_date) |> 
        filter(years >= 20) |> 
        nrow()



```

There are `r at_least_20` polygons with at least 20 years of data. These polygons were identified after filtering out observations with zero dates and those exclusively categorized as 'reclaimed' in the reclamation status.

::: {.column-margin}
This is looking just at the reclamation year and reclamation status, without
filtering by any other variable. Therefore, number of observations could be
lower due to other filtering criteria based on variables other than reclamation 
maximum year.
:::

## Abandoned date

According to documentation, the variable `max_abandoned_date` is 
__Indicates the latest (most recent) year a well was abandoned__. This is not
the same as orphaned. Rather indicates that the wellheads and any sort of
infrastructure was removed from the site.

```{r}
abandoned_wells_df |> 
        group_by(max_abandoned_date) |> 
        tally() |> 
        paged_table()

zero_obs <- abandoned_wells_df |> 
        group_by(max_abandoned_date) |> 
        tally() |> 
        filter(max_abandoned_date == 0) |> 
        select(n) |> 
        pull()
```

::: {.callout-important}
From the summarized table, there are `r zero_obs` observations with an
abandoned **date value of 0**.
:::


```{r}
## TODO: Organize this exploration of abandoned date

## Abandoned wells means that wells were removed
## If so, there should be a number of wells when abandoned date is 0

# abandoned_wells_df |> 
#         mutate(zero = ifelse(max_abandoned_date == 0, 0, 1)) |> 
#         group_by(zero) |> 
#         summarise(
#                 wellheads = sum(number_wellheads)
#         )
        
## Check reclamation status in dates 
# abandoned_wells_df |> 
#         filter(reclamation_date != 0 & max_abandoned_date != 0) |> 
#         mutate(diff = reclamation_date - max_abandoned_date) |> 
#         select(diff, reclamation_date, 
#                max_abandoned_date, reclamation_status) |> 
#         glimpse()
        

abandoned_wells_df |> 
        mutate(date_zero = ifelse(max_abandoned_date == 0, "yes", "no")) |> 
        group_by(reclamation_status, date_zero) |> 
        tally() |> 
        ggplot(aes(x = reclamation_status, y = n, fill = date_zero)) + 
        geom_bar(stat = "identity") +
        labs(x = "Reclamation status",
             y = "Total observations",
             title = "Reclaimed polygons have most of the abandoned date as zero",
             subtitle = "There are just 543 obs with a zero in the abandoned date") +
        theme_light()
```

::: {.callout-important}
 - Most of the sites with `reclamation_status` as **reclaimed**, do not have
 an abandoned date zero. 
:::


## Production date

All sites here are supposedly to be "abandoned" category. The maximum values
for all the dates variables are 2022 in the dataset. This is including the
production date:

```{r}
abandoned_wells_df |> 
        group_by(max_last_production_date) |> 
        tally() |> 
        filter(max_last_production_date != 0) |> 
        ggplot(aes(x = max_last_production_date, y = n)) +
        geom_col() +
        labs(x = "Year of the most recent production date",
             y = "Total well sites without dates with zero") +
        theme_light()
```


```{r}
abandoned_wells_df |> 
        mutate(date_zero = ifelse(max_last_production_date == 0,
                                  "yes", "no")) |> 
        group_by(reclamation_status, date_zero) |> 
        tally() |> 
        ggplot(aes(x = reclamation_status, y = n, fill = date_zero)) + 
        geom_bar(stat = "identity") +
        labs(x = "Reclamation status",
             y = "Total observations",
             fill = "Last production date as zero",
             title = "Reclamation status for last production date variable",
             subtitle = "All reclamation status categories contains values with dates as zero") +
        theme_light()
```

## Reclamation date vs Abandoned date

```{r}
cat <- abandoned_wells_df |> 
        filter(reclamation_date != 0 & max_abandoned_date != 0) |> 
        mutate(diff = reclamation_date - max_abandoned_date) |> 
        select(diff, reclamation_date, max_abandoned_date) |> 
        # arrange(desc(diff))
        # paged_table()
        group_by(diff) |> 
        tally() |> 
        mutate(cat = case_when(
                diff < 0 ~ "less",
                diff > 0 ~ "more",
                diff == 0 ~ "same",
                .default = NA
        )) |> 
        group_by(cat) |> 
        summarize(
                total = sum(n)
        )
```

Does the reclamation date has to match with abandoned date? In the data set,
excluding observations with dates equal to `0`, there are `r cat$total[1]` 
polygons where the abandoned date is more recent than reclamation date,
`r cat$total[2]` where the reclamation date is more recent than the abandoned
date, and `r cat$total[3]` with both dates being the same.

The interactive @fig-reclamation_vs_abandoned shows the difference in years 
distribution of these dates. The differences indicate: 

 - `0` = Same year abandoned date reclamation.
 - `> 0` = Date reclamation is more recent than the abandoned date.
 - `< 0` = Abandoned date is more recent than reclamation date.

```{r}
#| label: fig-reclamation_vs_abandoned
#| fig-cap: "Distribution of difference in years between reclamation and abandoned dates"
a <- abandoned_wells_df |> 
        filter(reclamation_date != 0 & max_abandoned_date != 0) |> 
        mutate(diff = reclamation_date - max_abandoned_date) |> 
        select(diff, reclamation_date, max_abandoned_date) |> 
        # arrange(desc(diff))
        # paged_table()
        group_by(diff) |> 
        tally() |> 
        # paged_table()
        ggplot(aes(x = diff, y = n)) +
        geom_col() +
        theme_light()

ggplotly(a)
```

## Reclamation date vs Last Production date

```{r}
cat <- abandoned_wells_df |> 
        filter(reclamation_date != 0 & max_last_production_date != 0) |> 
        mutate(diff = reclamation_date - max_last_production_date) |> 
        select(diff, reclamation_date, max_last_production_date) |> 
        # arrange(desc(diff))
        # paged_table()
        group_by(diff) |> 
        tally() |> 
        mutate(cat = case_when(
                diff < 0 ~ "less",
                diff > 0 ~ "more",
                diff == 0 ~ "same",
                .default = NA
        )) |> 
        group_by(cat) |> 
        summarize(
                total = sum(n)
        )
```

Here I have the same question: Does the reclamation date has to match with
the last production date? Given that we need polygons with no buildings or 
infrastructure on it to avoid anomalies in the spectral signature, does the
period of production implies that there is some sort of infrastructure in the
well area?

In this case, excluding observations with dates equal to `0`, there are 
`r cat$total[1]` polygons where the production date is more recent than
reclamation date, `r cat$total[2]` where the reclamation date is more recent
than the production date, and `r cat$total[3]` with both dates being the same.

```{r}
#| label: fig-reclamation_vs_last_production
#| fig-cap: "Distribution of difference in years between reclamation and last production dates"
a <- abandoned_wells_df |> 
        filter(reclamation_date != 0 & max_last_production_date != 0) |> 
        mutate(diff = reclamation_date - max_last_production_date) |> 
        select(diff, reclamation_date, max_last_production_date) |> 
        # arrange(desc(diff))
        # paged_table()
        group_by(diff) |> 
        tally() |> 
        # paged_table()
        ggplot(aes(x = diff, y = n)) +
        geom_col() +
        theme_light()

ggplotly(a)
```

## Abandoned date vs Last Production date

```{r}
cat <- abandoned_wells_df |> 
        # filter(reclamation_date == 0) |>
        filter(max_abandoned_date != 0 & max_last_production_date != 0) |>
        mutate(diff = max_abandoned_date - max_last_production_date) |> 
        select(diff, max_abandoned_date, max_last_production_date) |> 
        # arrange(desc(diff))
        # paged_table()
        group_by(diff) |> 
        tally() |> 
        mutate(cat = case_when(
                diff < 0 ~ "less",
                diff > 0 ~ "more",
                diff == 0 ~ "same",
                .default = NA
        )) |> 
        group_by(cat) |> 
        summarize(
                total = sum(n)
        )
```

Abandoned date is sometimes zero, does this means it is still in production?

There is one variable feature_ty which definition is: "The type or category of
human footprint feature". In this dataset every observation has the category: 
"WELL-ABAND", so all the polygons should be abandoned.

When we have 0 in the abandoned date, we have:

 - 4687 observation with max last production date in 0.
 - The maximum date value in the range is 2022 (This is the maximum date value
 found for every date variable)

And then, the distribution of the last production date observations that are 
not 0:

```{r}
a <- abandoned_wells_df |> 
        filter(max_abandoned_date == 0) |> 
        group_by(max_last_production_date) |> 
        tally() |> 
        filter(max_last_production_date != 0) |> 
        ggplot(aes(x = max_last_production_date, y = n)) +
        geom_bar(stat = "identity") +
        theme_light()

ggplotly(a)
```

In this case, excluding observations with dates equal to `0`, there are 
`r cat$total[1]` polygons where the production date is more recent than
abandoned date, `r cat$total[2]` where the abandoned date is more recent
than the production date, and `r cat$total[3]` with both dates being the same.

::: {.callout-important}
Do we need to consider last production dates and abandoned dates to be earlier
than the last reclamation date?
:::

# Reclaimed sites

We have that some dates has some inconsistencies when considering all the
`reclaimed_status` categories. Let's check what happens when using only
reclaimed sites

```{r}
# reclaimed <- abandoned_wells_df |>
#         filter(reclamation_status == "reclaimed") |> 
#         filter(max_abandoned_date != 0)
# 
# ## Abandoned date
# reclaimed |> 
#         mutate(diff = reclamation_date - max_abandoned_date) |> 
#         select(diff, reclamation_date, max_abandoned_date) |> 
#         arrange(desc(diff)) |> 
#         DT::datatable()
# 
# ## Production date
# reclaimed |> 
#         mutate(diff = reclamation_date - max_last_production_date) |> 
#         select(diff, reclamation_date, max_last_production_date) |> 
#         arrange(desc(diff)) |> 
#         DT::datatable()
# 
# ## Production date
# reclaimed |> 
#         mutate(diff = max_abandoned_date - max_last_production_date) |> 
#         select(diff, max_abandoned_date, max_last_production_date) |> 
#         arrange(desc(diff)) |> 
#         DT::datatable()
```


# Polygons characteristics

The variables `shape_length` and `shape_area` has the following definitions:

| Variable | Definition |
| -------- | ---------- |
| Shape length | Feature geometry shape length value automatically generated by ArcGIS, in units of the selected coordinate system |
| Shape area | Feature geometry shape area value automatically generated by ArcGIS, in units of the selected coordinate system |

According to the data file metadata, the coordinate system is
`Projected CRS: NAD83 / Alberta 10-TM (Forest)`. The unit is
[meters](https://epsg.io/3402). The area range of values is 
`r range(abandoned_wells_df$shape_area)`

The following table show the distribution of the polygon areas with classes
of 1000 observations. 

```{r}
#| echo: false
#| results: hide
dist_area <- fdt(abandoned_wells_df$shape_area, start = 0, 
                 end = 344000, h = 1000) 

dist_table_area <- summary(dist_area)
```

```{r}
dist_table_area |> 
        as_tibble() |> 
        clean_names() |> 
        filter(f != 0) |> 
        rename(
                'Class limits (m2)' = 'class_limits',
                'Frecuency' = 'f',
                'Relative Frecuency' = 'rf',
                'Relative Frecuency %' = 'rf_percent',
                'Cummulative Frecuency' = 'cf',
                'Cummulative Frecuency %' = 'cf_percent'
        ) |> 
        # paged_table()
        DT::datatable()
```

# Key points:

 - The data frame contains 182189 observations (polygons) with 26 variables 
 - There is a variable with the last reclamation year values.
 - All polygons correspond to abandoned wells
 - There are 1001 NA's in the well id (which also correspond to NA's in other 
 id variables)
 - There are 56 "segmented polygons" corresponding to 27 well sites (with same id)
 - There are 89915 observations with a year reclamation date value of 0.
 - The number of polygons with at least 20 years are 43579.
 - 2066 polygons where the abandoned date is more recent than reclamation date.
 - 1111 polygons where the production date is more recent than reclamation date.
 - 779 polygons where the production date is more recent than abandoned date
 - The area range of polygons values is 28.8200505 to 3.4045275^{5}
 - Most of reclaimed sites, do not have an abandoned date zero.

# Filtering steps

The following are the steps to be followed for the filtering process and final
polygon selection:

 - Reclamation status = reclaimed
 - Reclamation date = not zero
 - Reclamation date = At least 20 years record
 - Reclamation date more recent than abandoned date
 - Reclamation date more recent than last production date
 - Abandoned date more recent than last production date
 

```{r}
selected_polygons <- abandoned_wells |> 
        filter(reclamation_status == "reclaimed") |> 
        filter(reclamation_date != 0) |> 
        mutate(reclamation_years = max(reclamation_date) - reclamation_date) |> 
        filter(reclamation_years >= 20) |>
        filter(reclamation_date > max_abandoned_date) |> 
        filter(reclamation_date > max_last_production_date) |> 
        filter(max_abandoned_date > max_last_production_date)

# write_sf(obj = selected_polygons, dsn = "data/selected_polygons.gpkg")
```


If we apply those filters, we will end up with `r nrow(selected_polygons)`
polygons (from the `r nrow(abandoned_wells_df)` original observations)




```{r}
# Subir data

## 1- Reclamation dates 0
## 2- Abandoned dates 0
## 3- Production dates 0
## 4- Abandoned date > reclamation date
## 5- Production date > reclamation date
## 6- Production date > Abandoned date

# data_3 <- abandoned_wells |> 
#         filter(max_abandoned_date == 0)
# 
# data_4 <- abandoned_wells |> 
#         # filter(reclamation_status == "reclaimed") |>
#         filter(reclamation_date != 0 & max_abandoned_date != 0) |> 
#         mutate(reclamation_minus_abandoned =
#                        reclamation_date - max_abandoned_date) |> 
#         # select(reclamation_date, max_abandoned_date, diff) |>
#         filter(reclamation_minus_abandoned < 0) #|> glimpse()
# 
# 
# data_5 <- abandoned_wells |> 
#         # filter(reclamation_status == "reclaimed") |> 
#         filter(reclamation_date != 0 & max_last_production_date != 0) |> 
#         mutate(reclamation_minus_production =
#                        reclamation_date - max_last_production_date) |> 
#         # select(reclamation_date, max_last_production_date, diff) |>
#         filter(reclamation_minus_production < 0) #|> glimpse()
# 
# data_6 <- abandoned_wells |> 
#         # filter(reclamation_status == "reclaimed") |> 
#         filter(max_abandoned_date != 0 & max_last_production_date != 0) |> 
#         mutate(abandoned_minus_production =
#                        max_abandoned_date - max_last_production_date) |> 
#         # select(max_abandoned_date, max_last_production_date, diff) |>
#         filter(abandoned_minus_production < 0) #|> glimpse()
# 
# write_sf(obj = data_3, dsn = "data/abandoned_date_zero.gpkg")
# write_sf(obj = data_4, dsn = "data/reclamation_abandoned.gpkg")
# write_sf(obj = data_5, dsn = "data/reclamation_production.gpkg")
# write_sf(obj = data_6, dsn = "data/abandoned_production.gpkg")
# 
# 
# test <- tribble(
#   ~x,  ~y,
#   0, 3,
#   3, 9,
#   9, 0,
#   4, 0,
#   0, 0,
#   0, 6
# )
# 
# test |> 
#         filter(x != 0 & y != 0)
# 
# test |> 
#         filter(x != 0 | y != 0)
```










 