---
title: "Abandoned wells data exploration"
author: Ronny A. Hernandez Mora
execute:
  message: false
  warning: false
format: 
  html:
    theme:
      - flatly
    linkcolor: "#FF5500"
    highlight-style: tango
    toc: true
    toc-title: Table of contents
    toc-location: left
    number-sections: false
    colorlinks: true
    code-fold: true
    code-line-numbers: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
library(dplyr)
library(sf)
library(janitor)
library(purrr)
library(visdat)
library(ggplot2)
library(rmarkdown)
library(gt)
library(cowplot)
```

This is an Exploratory Data Analysis to understand the data characteristics of 
the layer `o16_WellsAbnd_HFI_2021` from the [Wall-to-Wall Human Footprint Inventory](https://abmi.ca/home/data-analytics/da-top/da-product-overview/Human-Footprint-Products/HF-inventory.html) by the [Alberta Biodiversity Monitoring Institute](https://abmi.ca/home.html).

The aim is to identify characteristics that may aid in 
[selecting polygons](https://github.com/ronnyhdez/reclaimed_sites_ab/issues/6)
for subsequent analysis.

# Read the data

Following information is part of the file metadata:

```{r}
abandoned_wells <- st_read(dsn = 'HFI2021.gdb/HFI2021.gdb',
                           layer = 'o16_WellsAbnd_HFI_2021') |> 
        clean_names()
```

This is a dataframe with **`r nrow(abandoned_wells)` observations** and 
**`r ncol(abandoned_wells)` variables**. A glimpse of the first observations per
each variable and its type is shown here:

```{r}
glimpse(abandoned_wells)
```

# Attribute table general characteristics

Use just the attribute table as dataframe for quick exploration

```{r}
abandoned_wells_df <- abandoned_wells |> 
        st_drop_geometry()
```

## Unique values per variable

How many unique values do we have per variable?

```{r}
abandoned_wells_df |> 
        map_dfr(~n_distinct(.x)) |> 
        paged_table()
```

Insights from the output:

 - `footprint_id` does not match the number of observations. Check if there are
 NA's in polygons and why.
 - `well_status` we just have 1 which means **abandoned**.
 - `spud_date` and `spud_year` are the date when drilling first began on the
 well pad. 125 different years in the registry? Check how many years of data 
 we have.
 - The `number_wellheads` is the total number of wellbores on the well pad. Does
 this have an impact in the reclamation process?
 - `visible` variable probably have `NA's`. There should be just 3 values:
 0 = not visible, 1 = fully visible, 2 = partially visible. This reflects the
 state of visibility of a footprint. No idea what this means.
 - `oilsands_evaluation_well` we have just the 2 categories described in
 documentation: 0 = No Oil Sands Evaluation (OSE) well, 1 = OSE well present.
 - Check distribution of variable `reclamation_status`.
 - `reclamation_date` it's the most recent reclamation certification.

## Key variable

What is each row? The dataset has `r nrow(abandoned_wells_df)` observations that
should match the same amount of unique values for one of the variables contained
in the dataset. The variable closer to this number is `footprint_id`, but it
has less number of unique values. What are they?

Assuming that each row in the dataset is one unique site (or one unique
observation), the `wellsite_footprint_id` should have one observation per each
id.  

When grouping all the observations per `wellsite_footprint_id`, I found those
id's that have more than 1 observation as shown in @tbl-id_tally.

```{r}
#| label: tbl-id_tally
#| tbl-cap: "Well site id's with more than 1 observation"
abandoned_wells_df |> 
        group_by(wellsite_footprint_id) |> 
        tally(sort = T) |> 
        filter(n > 1) |> 
        gt()
```

The @tbl-id_repeated_complete, shows every well site with more than 1 
observation per id. In total, there are **56** well sites with this condition,  excluding the observations with NAs. It seems to have the same values for each
of its variables except for the `shape_length` and `shape_area`.

```{r}
#| label: tbl-id_repeated_complete
#| tbl-cap: "Data frame subset of the well sites which have more than 1 observation per id"
repeated_ids <- abandoned_wells_df |> 
        group_by(wellsite_footprint_id) |> 
        tally() |> 
        filter(n > 1 & !is.na(wellsite_footprint_id)) |> 
        select(wellsite_footprint_id) |> 
        pull()

abandoned_wells_df |> 
        filter(wellsite_footprint_id %in% repeated_ids) |> 
        arrange(wellsite_footprint_id) |> 
        paged_table()
```

The @fig-same_wellsite_id plots of the observations with the same `id` shows that probably, some
well sites, are composed by more than 1 polygon. They look relatively close. 
This segmentation explains the differences in the `shape_length` and 
`shape_area` variables when the rest of the variables are the exact same per
`id`

```{r}
#| label: fig-same_wellsite_id
#| fig-cap: "Polygons with the same well site id"
a <- abandoned_wells |> 
        filter(wellsite_footprint_id == 109118) |> 
        ggplot() +
        geom_sf() 

b <- abandoned_wells |> 
        filter(wellsite_footprint_id == 109503) |> 
        ggplot() +
        geom_sf()

c <- abandoned_wells |> 
        filter(wellsite_footprint_id == 268598) |> 
        ggplot() +
        geom_sf()

d <- abandoned_wells |> 
        filter(wellsite_footprint_id == 287438) |> 
        ggplot() +
        geom_sf()

plot_grid(a, b, c, d, labels = c('A', 'B', 'C', 'D'))
```

### What is happening with the NA's in id?

There are `r sum(is.na(abandoned_wells_df$wellsite_footprint_id))` observations
which have NA in the `wellsite_footprint_id` variable. The @fig-na_wellsite_id
shows that together with the `wellsite_footprint_id`, the `disp_num`, `lcu_id`,
and the vast majority of `fieldname` observations are also NAs.

```{r}
#| label: fig-na_wellsite_id
#| fig-cap: "Observations with NA in the well site id variable"
abandoned_wells_df |> 
        filter(is.na(wellsite_footprint_id) == TRUE) |> 
        vis_dat(sort_type = F)
```

Polygons with NA's in their ids seems to be fine (not segmented or empty). The
@fig-na_wellsite_id_polygon shows two of them.

```{r}
#| label: fig-na_wellsite_id_polygon
#| fig-cap: "Polygons with NAs in their ids"
a <- abandoned_wells |> 
        filter(is.na(wellsite_footprint_id) == TRUE) |> 
        slice(34) |> 
        ggplot() +
        geom_sf() 

b <- abandoned_wells |> 
        filter(is.na(wellsite_footprint_id) == TRUE) |> 
        slice(534) |> 
        ggplot() +
        geom_sf() 

plot_grid(a, b, labels = c('A', 'B'))
```

::: {.callout-important}
There are `r length(repeated_ids)` "segmented polygons" which are represented by
the same id. Also we have `r sum(is.na(abandoned_wells_df$wellsite_footprint_id))`
NA's in the well site ids, which have at the same time NAs in `disp_num`,
`lcu_id`, and `fieldname`

Should we exclude the 56 segmented polygons?
Do we want to use polygons without any id?
:::

## Character variables

We have just 6 character variables. Nonetheless, I should take into account that
other variables with categories are encoded with numbers and I should check the
ABMI data document to understand the meaning. The table @tbl-character_variables
 
```{r}
#| label: tbl-character_variables
#| tbl-cap: "Glimpse of the character variables"
abandoned_wells_df |> 
        select_if(is.character) |> 
        glimpse() 
```

Check unique values per character variable:

```{r}
# Check number of distinct observations
abandoned_wells_df |> 
        select_if(is.character) |> 
        map(~n_distinct(.x))

# Check categories 
abandoned_wells_df |> 
        select_if(is.character) |> 
        select(-hfi_id, -disp_num, -lcu_id) |>
        map(~unique(.x))
```

```{r}
# abandoned_wells_df |> 
#         vis_dat(warn_large_data = FALSE)
```

::: {.callout-note}
Everything seems find with the character variables. Not much information seems
to be useful for the analysis.

There is just the category `abandoned`, 3 `fieldnames` and 4 data `sources`
:::

# Date variables

We have the following variables that represents a date in the dataset:

| Variable | Meaning |
| -------- | ------- |
| first_spud_date            | date when drilling first began on the well pad
| first_spud_year            | date when drilling first began on the well pad
| reclamation_date           | most recent reclamation certification issued
| min_onproduction_date      | earliest reported year a well went into prod
| max_last_production_date   | latest reported year of production at a well
| max_abandoned_date         | latest reported year a well was abandoned
| year                       | ? (Did not find definition in documentation)
 
We need to obtain the latest reclamation date for each of the polygons. One
site could potentially have several reclamation dates, but we have no way to
find out that information from this dataset. Also we are considering using just
the last reclamation date for the analysis. This dataset has reclamation
dates that span `r range(abandoned_wells_df$reclamation_date)`.

```{r}
abandoned_wells_df |> 
        group_by(reclamation_date) |> 
        tally() |> 
        paged_table()

zero_obs <- abandoned_wells_df |> 
        group_by(reclamation_date) |> 
        tally() |> 
        filter(reclamation_date == 0) |> 
        select(n) |> 
        pull()
```

::: {.callout-important}
From the summarized table, there are `r zero_obs` observations with a year
reclamation **date value of 0**. This means that if reclamation date is
an important variable for the analysis, we will loose these polygons.
:::

Let's check the number of sites per year of the most recent reclamation
certification issued:

```{r}
abandoned_wells_df |> 
        group_by(reclamation_date) |> 
        tally() |> 
        filter(reclamation_date != 0) |> 
        ggplot(aes(x = reclamation_date, y = n)) +
        geom_col() +
        labs(x = "Year of the most recent reclamation certification issued",
             y = "Total well sites") +
        theme_light()
```

## Number of observations with minimun amount of years from reclamation year

We need to obtain polygons with a sufficient time range from the last
reclamation year to include in the analysis. The following interactive plot
helps to explore the number of observations that we have if we select the
number of years since the last reclamation certification was issued.

::: {.callout-important}
The total number of observations from the dataset is `r nrow(abandoned_wells_df)`
but there are `r zero_obs` observations with a year reclamation **date value of 0**. 
:::

```{r}
# Create interactive plot that shows number of observations with at least
# 20 years or X since last year of reclamation



```

## Reclamation date vs Abandoned date

Does the reclamation date has to match with abandoned date?

Differences would mean: 

0 = Same year abandoned date reclamation.
> 0 = Date reclamation is more recent than the abandoned date.
< 0 = Abandoned date is more recent than reclamation date.

```{r}
abandoned_wells_df |> 
        filter(reclamation_date != 0 & max_abandoned_date != 0) |> 
        mutate(diff = reclamation_date - max_abandoned_date) |> 
        select(diff, reclamation_date, max_abandoned_date) |> 
        # arrange(desc(diff))
        # paged_table()
        group_by(diff) |> 
        tally() |> 
        # paged_table()
        ggplot(aes(x = diff, y = n)) +
        geom_col() +
        theme_light()
```

## Reclamation date vs Last Production date

Here I have the same question: Does the reclamation date has to match with
the last production date? Given that we need polygons with no buildings or 
infrastructure on it to avoid anomalies in the spectral signature 

## Polygons characteristics

 - Size distribution of area_ha shape length shape area

## Observations

# Key points:

 - We do have the last reclamation year
 - There are xxx NA's